name: api-cd-dev

on:
    pull_request:
        branches: [ dev ]
        paths:
            - 'src/app/api/**'
            - 'src/domain/**'
            - 'src/infrastructure/client/**'
            - 'src/infrastructure/storage/**'
            - 'src/infrastructure/redis/**'
            - 'src/support/logger/**'
            - 'src/support/lock/**'
            - 'src/support/common/**'
            - 'src/support/mail/**'
        types: [ closed ]
jobs:
    build:
        runs-on: ubuntu-latest
        if: github.event.pull_request.merged
        steps:
            - uses: actions/checkout@v2
            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  java-version: '17'
                  distribution: 'temurin'
            - name: Cache Gradle
              uses: actions/cache@v2
              with:
                  path: |
                      ~/.gradle/caches
                      ~/.gradle/wrapper
                  key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                  restore-keys: |
                      ${{ runner.os }}-gradle-
            - name: Grant execute permission for gradlew
              run: chmod +x gradlew
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ap-northeast-2
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            - name: Build and Push Docker image to Amazon ECR
              run: ./gradlew :api:jib -Djib.from.image=openjdk:17-jdk-slim -Djib.to.image=${{secrets.DEV_ECR_IMAGE}} -Djib.to.auth.username=AWS -Djib.to.auth.password=${{ steps.ecr-login.outputs.ecr-password }} -Djib.to.tags=dev -Djib.container.jvmFlags="-Dspring.profiles.active=dev,-Dfile.encoding=UTF-8" -Djib.container.environment="DATASOURCE_URL=${{ secrets.DEV_DATASOURCE_URL}},DATASOURCE_USERNAME=${{ secrets.DEV_DATASOURCE_USERNAME }},DATASOURCE_PASSWORD=${{ secrets.DEV_DATASOURCE_PASSWORD }},KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }},KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }},DEV_REDIS_HOST=${{ secrets.DEV_REDIS_HOST }},DEV_REDIS_PORT=${{ secrets.DEV_REDIS_PORT }},DEV_REDIS_PASSWORD=${{ secrets.DEV_REDIS_PASSWORD }},DEV_SERVER_DOMAIN=${{ secrets.DEV_SERVER_DOMAIN}},MAIL_USERNAME=${{ secrets.MAIL_USERNAME}},MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD}}"
            - name: Trigger ECS
              run: |
                  aws ecs update-service --cluster ${{ secrets.AWS_DEV_ECS_CLUSTER }} --service ${{ secrets.AWS_DEV_ECS_SERVICE }} --force-new-deployment
